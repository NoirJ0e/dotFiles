" plugin file save location
call plug#begin()

" ===
" === Create floating terminal in vim ===

Plug 'voldikss/vim-floaterm'
" === Keybindings 
nmap <S-p> :FloatermNew<CR>
" === File Explorer in vim
" ===

Plug 'preservim/nerdtree'
" Keybindings
"nnoremap <leader>n :NERDTreeFocus<CR>
"nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
"nnoremap <C-f> :NERDTreeFind<CR>

" ===
" === MarkdownPreview Plugin in vim
" ===

Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }

" ===
" === Highlight the same word under cursor
" ===

Plug 'dominikduda/vim_current_word'
let g:vim_current_word#highlight_current_word = 0

" ===
" === Move the cursor faster
" ===

Plug 'rhysd/accelerated-jk'
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
let g:accelerated_jk_acceleration_table = [2, 4, 6]

" ===
" ===
" ===

Plug 'RRethy/vim-illuminate'
let g:Hexokinase_highlighters = ['virtual']
let g:Illuminate_delay = 150
hi illuminatedWord cterm=undercurl gui=undercurl

" ===
" === Highlight the TODO thing in the file
" ===

Plug 'sakshamgupta05/vim-todo-highlight'
let g:todo_highlight_config = {
            \   'TODO': {
            \     'gui_fg_color': '#0f0fff',
            \     'gui_bg_color': '#affd3a',
            \   },
            \   'FIXME': {
            \     'gui_fg_color': '#000000',
            \     'gui_bg_color': '#af2d3a',
            \   }
            \}

" ===
" === Save the file automatic
" ===

Plug 'vim-scripts/vim-auto-save'
let g:auto_save_silent = 1 
autocmd FileType markdown let g:auto_save = 1

" ===
" === Enter '' and [] things way faster
" ===

Plug 'jiangmiao/auto-pairs'

" ===
" === Color schemes
" ===

Plug 'sainnhe/sonokai'
let sonokai_style = 'atlantis'
let g:sonokai_transparent_background = 1
Plug 'joshdick/onedark.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme='deus'

" ===
" === Fast select objects
" ===

Plug 'gcmt/wildfire.vim'

" ===
" === Coc auto completion (By LSP)
" ===

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" === Coc Settings

set hidden
set updatetime=100
set shortmess+=c
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" trigger completion
"inoremap <silent><expr> <s-space> coc#refresh()

" find out 

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" rename
nmap <leader>rn <Plug>(coc-rename)


call plug#end()

" ===
" === Other settings
" ===

set guifont=FiraMono\ NF:h14
set rnu
set nu
set mouse=a
colorscheme onedark

" ===
" === Self-defined key maps
" ===

"namp <silent> <S-j> :tabNext<CR>
"namp <silent> <S-k> :tabPrev<CR>


" ===
" === Coc Global Extensions
" === 

let g:coc_global_extensions = ['coc-json', 'coc-vimlsp', 'coc-marketplace']

" === 
" === Self-defined functions
" === 

" === Run Currently file directyl
map <S-r> :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec 'w'
	if &filetype =='c'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'cpp'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'java'
		exec "!javac %"
		exec "!time java %<"
	elseif &filetype == 'sh'
		:!time sh %
	elseif &filetype == 'python'
		exec "!time python3 %"
	elseif &filetype == 'html'
		exec "!firefox % &"
	elseif &filetype == 'go'
		exec "!time go run %"
	endif
endfunction

" === Make tab = 4 spaces
"filetype plugin indent on
"" show existing tab with 4 spaces width
"set tabstop=4
"" when indenting with '>', use 4 spaces width
"set shiftwidth=4
"" On pressing tab, insert 4 spaces
"set expandtab

